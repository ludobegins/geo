{"version":3,"file":"asymmetrik-ngx-leaflet.mjs","sources":["../../../projects/ngx-leaflet/src/lib/core/leaflet.util.ts","../../../projects/ngx-leaflet/src/lib/core/leaflet.directive.ts","../../../projects/ngx-leaflet/src/lib/core/leaflet.directive.wrapper.ts","../../../projects/ngx-leaflet/src/lib/layers/leaflet-layer.directive.ts","../../../projects/ngx-leaflet/src/lib/layers/leaflet-layers.directive.ts","../../../projects/ngx-leaflet/src/lib/layers/control/leaflet-control-layers-changes.model.ts","../../../projects/ngx-leaflet/src/lib/layers/control/leaflet-control-layers.wrapper.ts","../../../projects/ngx-leaflet/src/lib/layers/control/leaflet-control-layers-config.model.ts","../../../projects/ngx-leaflet/src/lib/layers/control/leaflet-control-layers.directive.ts","../../../projects/ngx-leaflet/src/lib/layers/base/leaflet-baselayers.directive.ts","../../../projects/ngx-leaflet/src/lib/leaflet.module.ts","../../../projects/ngx-leaflet/src/lib/layers/leaflet-tile-layer-definition.model.ts","../../../projects/ngx-leaflet/src/asymmetrik-ngx-leaflet.ts"],"sourcesContent":["import { EventEmitter, NgZone } from '@angular/core';\n\nexport class LeafletUtil {\n\n\tstatic mapToArray<T>(map: { [ key: string ]: T }): T[] {\n\t\tconst toReturn: T[] = [];\n\n\t\tfor (const k in map) {\n\t\t\tif (map.hasOwnProperty(k)) {\n\t\t\t\ttoReturn.push(map[k]);\n\t\t\t}\n\t\t}\n\n\t\treturn toReturn;\n\t}\n\n\tstatic handleEvent<T>(zone: NgZone, eventEmitter: EventEmitter<T>, event: T) {\n\n\t\t// Don't want to emit if there are no observers\n\t\tif (0 < eventEmitter.observers.length) {\n\t\t\tzone.run(() => {\n\t\t\t\teventEmitter.emit(event);\n\t\t\t});\n\t\t}\n\n\t}\n}\n","import {\n\tDirective, ElementRef, EventEmitter, HostListener, Input, NgZone, OnChanges, OnDestroy, OnInit, Output,\n\tSimpleChange\n} from '@angular/core';\n\nimport { latLng, LatLng, LatLngBounds, LeafletEvent, LeafletMouseEvent, map, Map, MapOptions } from 'leaflet';\n\nimport { LeafletUtil } from './leaflet.util';\n\n@Directive({\n\tselector: '[leaflet]'\n})\nexport class LeafletDirective\n\timplements OnChanges, OnDestroy, OnInit {\n\n\treadonly DEFAULT_ZOOM = 1;\n\treadonly DEFAULT_CENTER = latLng(38.907192, -77.036871);\n\treadonly DEFAULT_FPZ_OPTIONS = {};\n\n\tresizeTimer: any;\n\n\t// Reference to the primary map object\n\tmap: Map;\n\n\t@Input('leafletFitBoundsOptions') fitBoundsOptions = this.DEFAULT_FPZ_OPTIONS;\n\t@Input('leafletPanOptions') panOptions = this.DEFAULT_FPZ_OPTIONS;\n\t@Input('leafletZoomOptions') zoomOptions = this.DEFAULT_FPZ_OPTIONS;\n\t@Input('leafletZoomPanOptions') zoomPanOptions = this.DEFAULT_FPZ_OPTIONS;\n\n\n\t// Default configuration\n\t@Input('leafletOptions') options: MapOptions = {};\n\n\t// Configure callback function for the map\n\t@Output('leafletMapReady') mapReady = new EventEmitter<Map>();\n\n\t// Zoom level for the map\n\t@Input('leafletZoom') zoom: number;\n\t@Output('leafletZoomChange') zoomChange = new EventEmitter<number>();\n\n\t// Center of the map\n\t@Input('leafletCenter') center: LatLng;\n\t@Output('leafletCenterChange') centerChange = new EventEmitter<LatLng>();\n\n\t// Set fit bounds for map\n\t@Input('leafletFitBounds') fitBounds: LatLngBounds;\n\n\t// Set the max bounds for the map\n\t@Input('leafletMaxBounds') maxBounds: LatLngBounds;\n\n\t// Set the min zoom for the map\n\t@Input('leafletMinZoom') minZoom: number;\n\n\t// Set the max zoom for the map\n\t@Input('leafletMaxZoom') maxZoom: number;\n\n\n\t// Mouse Map Events\n\t@Output('leafletClick') onClick = new EventEmitter<LeafletMouseEvent>();\n\t@Output('leafletDoubleClick') onDoubleClick = new EventEmitter<LeafletMouseEvent>();\n\t@Output('leafletMouseDown') onMouseDown = new EventEmitter<LeafletMouseEvent>();\n\t@Output('leafletMouseUp') onMouseUp = new EventEmitter<LeafletMouseEvent>();\n\t@Output('leafletMouseMove') onMouseMove = new EventEmitter<LeafletMouseEvent>();\n\t@Output('leafletMouseOver') onMouseOver = new EventEmitter<LeafletMouseEvent>();\n\t@Output('leafletMouseOut') onMouseOut = new EventEmitter<LeafletMouseEvent>();\n\n\t// Map Move Events\n\t@Output('leafletMapMove') onMapMove = new EventEmitter<LeafletEvent>();\n\t@Output('leafletMapMoveStart') onMapMoveStart = new EventEmitter<LeafletEvent>();\n\t@Output('leafletMapMoveEnd') onMapMoveEnd = new EventEmitter<LeafletEvent>();\n\n\t// Map Zoom Events\n\t@Output('leafletMapZoom') onMapZoom = new EventEmitter<LeafletEvent>();\n\t@Output('leafletMapZoomStart') onMapZoomStart = new EventEmitter<LeafletEvent>();\n\t@Output('leafletMapZoomEnd') onMapZoomEnd = new EventEmitter<LeafletEvent>();\n\n\tconstructor(private element: ElementRef, private zone: NgZone) {\n\t\t// Nothing here\n\t}\n\n\tngOnInit() {\n\n\t\t// Create the map outside of angular so the various map events don't trigger change detection\n\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t// Create the map with some reasonable defaults\n\t\t\tthis.map = map(this.element.nativeElement, this.options);\n\t\t\tthis.addMapEventListeners();\n\n\t\t});\n\n\t\t// Only setView if there is a center/zoom\n\t\tif (null != this.center && null != this.zoom) {\n\t\t\tthis.setView(this.center, this.zoom);\n\t\t}\n\n\t\t// Set up all the initial settings\n\t\tif (null != this.fitBounds) {\n\t\t\tthis.setFitBounds(this.fitBounds);\n\t\t}\n\n\t\tif (null != this.maxBounds) {\n\t\t\tthis.setMaxBounds(this.maxBounds);\n\t\t}\n\n\t\tif (null != this.minZoom) {\n\t\t\tthis.setMinZoom(this.minZoom);\n\t\t}\n\n\t\tif (null != this.maxZoom) {\n\t\t\tthis.setMaxZoom(this.maxZoom);\n\t\t}\n\n\t\tthis.doResize();\n\n\t\t// Fire map ready event\n\t\tthis.mapReady.emit(this.map);\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t/*\n\t\t * The following code is to address an issue with our (basic) implementation of\n\t\t * zooming and panning. From our testing, it seems that a pan operation followed\n\t\t * by a zoom operation in the same thread will interfere with eachother. The zoom\n\t\t * operation interrupts/cancels the pan, resulting in a final center point that is\n\t\t * inaccurate. The solution seems to be to either separate them with a timeout or\n\t\t  * to collapse them into a setView call.\n\t\t */\n\n\t\t// Zooming and Panning\n\t\tif (changes['zoom'] && changes['center'] && null != this.zoom && null != this.center) {\n\t\t\tthis.setView(changes['center'].currentValue, changes['zoom'].currentValue);\n\t\t}\n\t\t// Set the zoom level\n\t\telse if (changes['zoom']) {\n\t\t\tthis.setZoom(changes['zoom'].currentValue);\n\t\t}\n\t\t// Set the map center\n\t\telse if (changes['center']) {\n\t\t\tthis.setCenter(changes['center'].currentValue);\n\t\t}\n\n\t\t// Other options\n\t\tif (changes['fitBounds']) {\n\t\t\tthis.setFitBounds(changes['fitBounds'].currentValue);\n\t\t}\n\n\t\tif (changes['maxBounds']) {\n\t\t\tthis.setMaxBounds(changes['maxBounds'].currentValue);\n\t\t}\n\n\t\tif (changes['minZoom']) {\n\t\t\tthis.setMinZoom(changes['minZoom'].currentValue);\n\t\t}\n\n\t\tif (changes['maxZoom']) {\n\t\t\tthis.setMaxZoom(changes['maxZoom'].currentValue);\n\t\t}\n\n\t}\n\n\tngOnDestroy() {\n\t\t// If this directive is destroyed, the map is too\n\t\tif (null != this.map) {\n\t\t\tthis.map.remove();\n\t\t}\n\t}\n\n\tpublic getMap() {\n\t\treturn this.map;\n\t}\n\n\n\t@HostListener('window:resize', [])\n\tonResize() {\n\t\tthis.delayResize();\n\t}\n\n\tprivate addMapEventListeners() {\n\n\t\tconst registerEventHandler = (eventName: string, handler: (e: LeafletEvent) => any) => {\n\t\t\tthis.map.on(eventName, handler);\n\t\t};\n\n\n\t\t// Add all the pass-through mouse event handlers\n\t\tregisterEventHandler('click', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onClick, e));\n\t\tregisterEventHandler('dblclick', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onDoubleClick, e));\n\t\tregisterEventHandler('mousedown', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseDown, e));\n\t\tregisterEventHandler('mouseup', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseUp, e));\n\t\tregisterEventHandler('mouseover', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseOver, e));\n\t\tregisterEventHandler('mouseout', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseOut, e));\n\t\tregisterEventHandler('mousemove', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseMove, e));\n\n\t\tregisterEventHandler('zoomstart', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapZoomStart, e));\n\t\tregisterEventHandler('zoom', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapZoom, e));\n\t\tregisterEventHandler('zoomend', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapZoomEnd, e));\n\t\tregisterEventHandler('movestart', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapMoveStart, e));\n\t\tregisterEventHandler('move', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapMove, e));\n\t\tregisterEventHandler('moveend', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapMoveEnd, e));\n\n\n\t\t// Update any things for which we provide output bindings\n\t\tconst outputUpdateHandler = () => {\n\t\t\tconst zoom = this.map.getZoom();\n\t\t\tif (zoom !== this.zoom) {\n\t\t\t\tthis.zoom = zoom;\n\t\t\t\tLeafletUtil.handleEvent(this.zone, this.zoomChange, zoom);\n\t\t\t}\n\n\t\t\tconst center = this.map.getCenter();\n\t\t\tif (null != center || null != this.center) {\n\n\t\t\t\tif (((null == center || null == this.center) && center !== this.center)\n\t\t\t\t\t|| (center.lat !== this.center.lat || center.lng !== this.center.lng)) {\n\n\t\t\t\t\tthis.center = center;\n\t\t\t\t\tLeafletUtil.handleEvent(this.zone, this.centerChange, center);\n\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tregisterEventHandler('moveend', outputUpdateHandler);\n\t\tregisterEventHandler('zoomend', outputUpdateHandler);\n\t}\n\n\t/**\n\t * Resize the map to fit it's parent container\n\t */\n\tprivate doResize() {\n\n\t\t// Run this outside of angular so the map events stay outside of angular\n\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t// Invalidate the map size to trigger it to update itself\n\t\t\tif (null != this.map) {\n\t\t\t\tthis.map.invalidateSize({});\n\t\t\t}\n\n\t\t});\n\n\t}\n\n\t/**\n\t * Manage a delayed resize of the component\n\t */\n\tprivate delayResize() {\n\t\tif (null != this.resizeTimer) {\n\t\t\tclearTimeout(this.resizeTimer);\n\t\t}\n\t\tthis.resizeTimer = setTimeout(this.doResize.bind(this), 200);\n\t}\n\n\n\t/**\n\t * Set the view (center/zoom) all at once\n\t * @param center The new center\n\t * @param zoom The new zoom level\n\t */\n\tprivate setView(center: LatLng, zoom: number) {\n\n\t\tif (null != this.map && null != center && null != zoom) {\n\t\t\tthis.map.setView(center, zoom, this.zoomPanOptions);\n\t\t}\n\n\t}\n\n\t/**\n\t * Set the map zoom level\n\t * @param zoom the new zoom level for the map\n\t */\n\tprivate setZoom(zoom: number) {\n\n\t\tif (null != this.map && null != zoom) {\n\t\t\tthis.map.setZoom(zoom, this.zoomOptions);\n\t\t}\n\n\t}\n\n\t/**\n\t * Set the center of the map\n\t * @param center the center point\n\t */\n\tprivate setCenter(center: LatLng) {\n\n\t\tif (null != this.map && null != center) {\n\t\t\tthis.map.panTo(center, this.panOptions);\n\t\t}\n\n\t}\n\n\t/**\n\t * Fit the map to the bounds\n\t * @param latLngBounds the boundary to set\n\t */\n\tprivate setFitBounds(latLngBounds: LatLngBounds) {\n\n\t\tif (null != this.map && null != latLngBounds) {\n\t\t\tthis.map.fitBounds(latLngBounds, this.fitBoundsOptions);\n\t\t}\n\n\t}\n\n\t/**\n\t * Set the map's max bounds\n\t * @param latLngBounds the boundary to set\n\t */\n\tprivate setMaxBounds(latLngBounds: LatLngBounds) {\n\n\t\tif (null != this.map && null != latLngBounds) {\n\t\t\tthis.map.setMaxBounds(latLngBounds);\n\t\t}\n\n\t}\n\n\t/**\n\t * Set the map's min zoom\n\t * @param number the new min zoom\n\t */\n\tprivate setMinZoom(zoom: number) {\n\n\t\tif (null != this.map && null != zoom) {\n\t\t\tthis.map.setMinZoom(zoom);\n\t\t}\n\n\t}\n\n\t/**\n\t * Set the map's min zoom\n\t * @param number the new min zoom\n\t */\n\tprivate setMaxZoom(zoom: number) {\n\n\t\tif (null != this.map && null != zoom) {\n\t\t\tthis.map.setMaxZoom(zoom);\n\t\t}\n\n\t}\n\n}\n","import { LeafletDirective } from './leaflet.directive';\n\nimport { Map } from 'leaflet';\n\nexport class LeafletDirectiveWrapper {\n\n\t// Reference to the main leaflet directive\n\tprotected leafletDirective: LeafletDirective;\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = leafletDirective;\n\t}\n\n\tinit() {\n\t\t// Nothing for now\n\t}\n\n\tgetMap(): Map {\n\t\treturn this.leafletDirective.getMap();\n\t}\n\n}\n","import {\n\tDirective, EventEmitter, Input, NgZone, OnChanges, OnDestroy, OnInit, Output,\n\tSimpleChange\n} from '@angular/core';\n\nimport { Layer, LeafletEvent } from 'leaflet';\n\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\nimport { LeafletUtil } from '../core/leaflet.util';\n\n\n/**\n * Layer directive\n *\n * This directive is used to directly control a single map layer. The purpose of this directive is to\n * be used as part of a child structural directive of the map element.\n *\n */\n@Directive({\n\tselector: '[leafletLayer]'\n})\nexport class LeafletLayerDirective\n\timplements OnChanges, OnDestroy, OnInit {\n\n\t@Input('leafletLayer') layer: Layer;\n\n\t// Layer Events\n\t@Output('leafletLayerAdd') onAdd = new EventEmitter<LeafletEvent>();\n\t@Output('leafletLayerRemove') onRemove = new EventEmitter<LeafletEvent>();\n\n\t// Layer Event handlers\n\tprivate onAddLayerHandler: any;\n\tprivate onRemoveLayerHandler: any;\n\n\t// Wrapper for the leaflet directive (manages the parent directive)\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t}\n\n\tngOnDestroy() {\n\n\t\tif (null != this.layer) {\n\n\t\t\t// Unregister the event handlers\n\t\t\tthis.removeLayerEventListeners(this.layer);\n\n\t\t\t// Remove the layer from the map\n\t\t\tthis.layer.remove();\n\t\t}\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\tif (changes['layer']) {\n\n\t\t\t// Update the layer\n\t\t\tconst p: Layer = changes['layer'].previousValue;\n\t\t\tconst n = changes['layer'].currentValue;\n\n\t\t\tthis.zone.runOutsideAngular(() => {\n\t\t\t\tif (null != p) {\n\t\t\t\t\tthis.removeLayerEventListeners(p);\n\t\t\t\t\tp.remove();\n\t\t\t\t}\n\t\t\t\tif (null != n) {\n\t\t\t\t\tthis.addLayerEventListeners(n);\n\t\t\t\t\tthis.leafletDirective.getMap().addLayer(n);\n\t\t\t\t}\n\t\t\t});\n\n\t\t}\n\n\t}\n\n\tprivate addLayerEventListeners(l: Layer) {\n\n\t\tthis.onAddLayerHandler = (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onAdd, e);\n\t\tl.on('add', this.onAddLayerHandler);\n\n\t\tthis.onRemoveLayerHandler = (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onRemove, e);\n\t\tl.on('remove', this.onRemoveLayerHandler);\n\n\t}\n\n\tprivate removeLayerEventListeners(l: Layer) {\n\n\t\tl.off('add', this.onAddLayerHandler);\n\t\tl.off('remove', this.onRemoveLayerHandler);\n\n\t}\n\n}\n","import { Directive, DoCheck, Input, IterableDiffer, IterableDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';\n\nimport { Layer} from 'leaflet';\n\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\n\n\n/**\n * Layers directive\n *\n * This directive is used to directly control map layers. As changes are made to the input array of\n * layers, the map is synched to the array. As layers are added or removed from the input array, they\n * are also added or removed from the map. The input array is treated as immutable. To detect changes,\n * you must change the array instance.\n *\n * Important Note: The input layers array is assumed to be immutable. This means you need to use an\n * immutable array implementation or create a new copy of your array when you make changes, otherwise\n * this directive won't detect the change. This is by design. It's for performance reasons. Change\n * detection of mutable arrays requires diffing the state of the array on every DoCheck cycle, which\n * is extremely expensive from a time complexity perspective.\n *\n */\n@Directive({\n\tselector: '[leafletLayers]'\n})\nexport class LeafletLayersDirective\n\timplements DoCheck, OnDestroy, OnInit {\n\n\t// Array of configured layers\n\tlayersValue: Layer[];\n\n\t// Differ to do change detection on the array\n\tlayersDiffer: IterableDiffer<Layer>;\n\n\t// Set/get the layers\n\t@Input('leafletLayers')\n\tset layers(v: Layer[]) {\n\t\tthis.layersValue = v;\n\n\t\t// Now that we have a differ, do an immediate layer update\n\t\tthis.updateLayers();\n\t}\n\tget layers(): Layer[] {\n\t\treturn this.layersValue;\n\t}\n\n\t// Wrapper for the leaflet directive (manages the parent directive)\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private differs: IterableDiffers, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.layersDiffer = this.differs.find([]).create<Layer>();\n\t}\n\n\tngDoCheck() {\n\t\tthis.updateLayers();\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t\t// Update layers once the map is ready\n\t\tthis.updateLayers();\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.layers = [];\n\t}\n\n\t/**\n\t * Update the state of the layers.\n\t * We use an iterable differ to synchronize the map layers with the state of the bound layers array.\n\t * This is important because it allows us to react to changes to the contents of the array as well\n\t * as changes to the actual array instance.\n\t */\n\tprivate updateLayers() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\n\t\tif (null != map && null != this.layersDiffer) {\n\n\t\t\tconst changes = this.layersDiffer.diff(this.layersValue);\n\t\t\tif (null != changes) {\n\n\t\t\t\t// Run outside angular to ensure layer events don't trigger change detection\n\t\t\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t\t\tchanges.forEachRemovedItem((c) => {\n\t\t\t\t\t\tmap.removeLayer(c.item);\n\t\t\t\t\t});\n\t\t\t\t\tchanges.forEachAddedItem((c) => {\n\t\t\t\t\t\tmap.addLayer(c.item);\n\t\t\t\t\t});\n\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n","export class LeafletControlLayersChanges {\n\tlayersRemoved: number = 0;\n\tlayersChanged: number = 0;\n\tlayersAdded: number = 0;\n\n\tchanged(): boolean {\n\t\treturn !(this.layersRemoved === 0 && this.layersChanged === 0 && this.layersAdded === 0);\n\t}\n}\n","import { EventEmitter, KeyValueChanges, NgZone } from '@angular/core';\n\nimport { control, Control, Layer } from 'leaflet';\n\nimport { LeafletControlLayersChanges } from './leaflet-control-layers-changes.model';\n\nexport class LeafletControlLayersWrapper {\n\n\t// The layers control object\n\tprotected layersControl: Control.Layers;\n\n\t// Event Emitter for when the control is ready\n\tprotected layersControlReady: EventEmitter<Control.Layers>;\n\n\tconstructor(private zone: NgZone, layersControlReady: EventEmitter<Control.Layers>) {\n\t\tthis.layersControlReady = layersControlReady;\n\t}\n\n\tgetLayersControl() {\n\t\treturn this.layersControl;\n\t}\n\n\tinit(controlConfig: any, controlOptions: any): Control.Layers {\n\n\t\tconst baseLayers = controlConfig.baseLayers || {};\n\t\tconst overlays = controlConfig.overlays || {};\n\n\t\t// Create the control outside of angular to ensure events don't trigger change detection\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.layersControl = control.layers(baseLayers, overlays, controlOptions);\n\t\t});\n\n\n\t\tthis.layersControlReady.emit(this.layersControl);\n\n\t\treturn this.layersControl;\n\t}\n\n\tapplyBaseLayerChanges(changes: KeyValueChanges<string, Layer>): LeafletControlLayersChanges {\n\t\tlet results: LeafletControlLayersChanges = new LeafletControlLayersChanges();\n\n\t\tif (null != this.layersControl) {\n\t\t\tresults =  this.applyChanges(changes, this.layersControl.addBaseLayer);\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tapplyOverlayChanges(changes: KeyValueChanges<string, Layer>): LeafletControlLayersChanges {\n\t\tlet results: LeafletControlLayersChanges = new LeafletControlLayersChanges();\n\n\t\tif (null != this.layersControl) {\n\t\t\tresults =  this.applyChanges(changes, this.layersControl.addOverlay);\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tprivate applyChanges(changes: KeyValueChanges<string, Layer>, addFn: (layer: Layer, name: string) => void): LeafletControlLayersChanges {\n\t\tconst results: LeafletControlLayersChanges = new LeafletControlLayersChanges();\n\n\t\tif (null != changes) {\n\n\t\t\t// All layer management is outside angular to avoid layer events from triggering change detection\n\t\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t\tchanges.forEachChangedItem((c) => {\n\t\t\t\t\tthis.layersControl.removeLayer(c.previousValue);\n\t\t\t\t\taddFn.call(this.layersControl, c.currentValue, c.key);\n\t\t\t\t\tresults.layersChanged++;\n\t\t\t\t});\n\t\t\t\tchanges.forEachRemovedItem((c) => {\n\t\t\t\t\tthis.layersControl.removeLayer(c.previousValue);\n\t\t\t\t\tresults.layersRemoved++;\n\t\t\t\t});\n\t\t\t\tchanges.forEachAddedItem((c) => {\n\t\t\t\t\taddFn.call(this.layersControl, c.currentValue, c.key);\n\t\t\t\t\tresults.layersAdded++;\n\t\t\t\t});\n\n\t\t\t});\n\n\t\t}\n\n\t\treturn results;\n\t}\n\n}\n","import { Layer } from 'leaflet';\n\nexport class LeafletControlLayersConfig {\n\tbaseLayers: { [name: string]: Layer } = {};\n\toverlays: { [name: string]: Layer } = {};\n}\n","import {\n\tDirective, DoCheck, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit,\n\tOutput\n} from '@angular/core';\n\nimport { Control, Layer } from 'leaflet';\n\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\n\n\n/**\n * Layers Control\n *\n * This directive is used to configure the layers control. The input accepts an object with two\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the last one it sees will be used.\n */\n@Directive({\n\tselector: '[leafletLayersControl]'\n})\nexport class LeafletLayersControlDirective\n\timplements DoCheck, OnDestroy, OnInit {\n\n\t// Control Layers Configuration\n\tlayersControlConfigValue: LeafletControlLayersConfig;\n\n\tbaseLayersDiffer: KeyValueDiffer<string, Layer>;\n\toverlaysDiffer: KeyValueDiffer<string, Layer>;\n\n\t@Input('leafletLayersControl')\n\tset layersControlConfig(v: LeafletControlLayersConfig) {\n\n\t\t// Validation/init stuff\n\t\tif (null == v) { v = new LeafletControlLayersConfig(); }\n\t\tif (null == v.baseLayers) { v.baseLayers = {}; }\n\t\tif (null == v.overlays) { v.overlays = {}; }\n\n\t\t// Store the value\n\t\tthis.layersControlConfigValue = v;\n\n\t\t// Update the map\n\t\tthis.updateLayers();\n\n\t}\n\tget layersControlConfig(): LeafletControlLayersConfig {\n\t\treturn this.layersControlConfigValue;\n\t}\n\n\t@Input('leafletLayersControlOptions') layersControlOptions: any;\n\n\t@Output('leafletLayersControlReady') layersControlReady = new EventEmitter<Control.Layers>();\n\n\tprivate controlLayers: LeafletControlLayersWrapper;\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private differs: KeyValueDiffers, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n\n\t\t// Generate differs\n\t\tthis.baseLayersDiffer = this.differs.find({}).create<string, Layer>();\n\t\tthis.overlaysDiffer = this.differs.find({}).create<string, Layer>();\n\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t\t// Set up control outside of angular to avoid change detection when using the control\n\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t// Set up all the initial settings\n\t\t\tthis.controlLayers\n\t\t\t\t.init({}, this.layersControlOptions)\n\t\t\t\t.addTo(this.leafletDirective.getMap());\n\n\t\t});\n\n\t\tthis.updateLayers();\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.layersControlConfig = { baseLayers: {}, overlays: {} };\n\t\tthis.controlLayers.getLayersControl().remove();\n\t}\n\n\tngDoCheck() {\n\t\tthis.updateLayers();\n\t}\n\n\tprotected updateLayers() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\t\tconst layersControl = this.controlLayers.getLayersControl();\n\n\t\tif (null != map && null != layersControl) {\n\n\t\t\t// Run the baselayers differ\n\t\t\tif (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\n\t\t\t\tconst changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\n\t\t\t\tthis.controlLayers.applyBaseLayerChanges(changes);\n\t\t\t}\n\n\t\t\t// Run the overlays differ\n\t\t\tif (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\n\t\t\t\tconst changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\n\t\t\t\tthis.controlLayers.applyOverlayChanges(changes);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n","import {\n\tDirective, DoCheck, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy,\n\tOnInit, Output\n} from '@angular/core';\n\nimport { Control, Layer } from 'leaflet';\n\nimport { LeafletUtil } from '../../core/leaflet.util';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from '../control/leaflet-control-layers.wrapper';\n\n\n/**\n * Baselayers directive\n *\n * This directive is provided as a convenient way to add baselayers to the map. The input accepts\n * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed. This directive\n * will also add the layers control so users can switch between available base layers.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the plugin will use the last one it sees.\n */\n@Directive({\n\tselector: '[leafletBaseLayers]'\n})\nexport class LeafletBaseLayersDirective\n\timplements DoCheck, OnDestroy, OnInit {\n\n\t// Base Layers\n\tbaseLayersValue: { [name: string]: Layer };\n\n\t// Base Layers Map Differ\n\tbaseLayersDiffer: KeyValueDiffer<string, Layer>;\n\n\t// Set/get baseLayers\n\t@Input('leafletBaseLayers')\n\tset baseLayers(v: { [name: string]: Layer }) {\n\t\tthis.baseLayersValue = v;\n\n\t\tthis.updateBaseLayers();\n\t}\n\tget baseLayers(): { [name: string]: Layer } {\n\t\treturn this.baseLayersValue;\n\t}\n\n\t// Control Options\n\t@Input('leafletLayersControlOptions') layersControlOptions: Control.LayersOptions;\n\n\t// Output for once the layers control is ready\n\t@Output('leafletLayersControlReady') layersControlReady = new EventEmitter<Control.Layers>();\n\n\t// Active Base Layer\n\tprivate baseLayer: Layer;\n\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\tprivate controlLayers: LeafletControlLayersWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private differs: KeyValueDiffers, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n\t\tthis.baseLayersDiffer = this.differs.find({}).create<string, Layer>();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.baseLayers = {};\n\t\tif (null != this.controlLayers.getLayersControl()) {\n\t\t\tthis.controlLayers.getLayersControl().remove();\n\t\t}\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t\t// Create the control outside angular to prevent events from triggering chnage detection\n\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t// Initially configure the controlLayers\n\t\t\tthis.controlLayers\n\t\t\t\t.init({}, this.layersControlOptions)\n\t\t\t\t.addTo(this.leafletDirective.getMap());\n\n\t\t});\n\n\t\tthis.updateBaseLayers();\n\n\t}\n\n\tngDoCheck() {\n\t\tthis.updateBaseLayers();\n\t}\n\n\tprotected updateBaseLayers() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\t\tconst layersControl = this.controlLayers.getLayersControl();\n\n\t\tif (null != map && null != layersControl && null != this.baseLayersDiffer) {\n\t\t\tconst changes = this.baseLayersDiffer.diff(this.baseLayersValue);\n\t\t\tconst results = this.controlLayers.applyBaseLayerChanges(changes);\n\n\t\t\tif (results.changed()) {\n\t\t\t\tthis.syncBaseLayer();\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Check the current base layer and change it to the new one if necessary\n\t */\n\tprotected syncBaseLayer() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\t\tconst layers = LeafletUtil.mapToArray(this.baseLayers);\n\t\tlet foundLayer: Layer;\n\n\t\t// Search all the layers in the map to see if we can find them in the baselayer array\n\t\tmap.eachLayer((l: Layer) => {\n\t\t\tfoundLayer = layers.find((bl) => (l === bl));\n\t\t});\n\n\t\t// Did we find the layer?\n\t\tif (null != foundLayer) {\n\t\t\t// Yes - set the baselayer to the one we found\n\t\t\tthis.baseLayer = foundLayer;\n\t\t}\n\t\telse {\n\t\t\t// No - set the baselayer to the first in the array and add it to the map\n\t\t\tif (layers.length > 0) {\n\t\t\t\tthis.baseLayer = layers[0];\n\n\t\t\t\t// Add layers outside of angular to prevent events from triggering change detection\n\t\t\t\tthis.zone.runOutsideAngular(() => {\n\t\t\t\t\tthis.baseLayer.addTo(map);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t}\n}\n","import { NgModule } from '@angular/core';\n\nimport { LeafletDirective } from './core/leaflet.directive';\nimport { LeafletLayerDirective } from './layers/leaflet-layer.directive';\nimport { LeafletLayersDirective } from './layers/leaflet-layers.directive';\nimport { LeafletLayersControlDirective } from './layers/control/leaflet-control-layers.directive';\nimport { LeafletBaseLayersDirective } from './layers/base/leaflet-baselayers.directive';\n\n@NgModule({\n\texports: [\n\t\tLeafletDirective,\n\t\tLeafletLayerDirective,\n\t\tLeafletLayersDirective,\n\t\tLeafletLayersControlDirective,\n\t\tLeafletBaseLayersDirective\n\t],\n\tdeclarations: [\n\t\tLeafletDirective,\n\t\tLeafletLayerDirective,\n\t\tLeafletLayersDirective,\n\t\tLeafletLayersControlDirective,\n\t\tLeafletBaseLayersDirective\n\t]\n})\nexport class LeafletModule {\n\n}\n","import { tileLayer, TileLayer } from 'leaflet';\n\nexport class LeafletTileLayerDefinition {\n\n\tconstructor(\n\t\tpublic type: string,\n\t\tpublic url: string,\n\t\tpublic options: any) { }\n\n\n\t/**\n\t * Creates a TileLayer from the provided definition. This is a convenience function\n\t * to help with generating layers from objects.\n\t *\n\t * @param layerDef The layer to create\n\t * @returns {TileLayer} The TileLayer that has been created\n\t */\n\tstatic createTileLayer(layerDef: LeafletTileLayerDefinition): TileLayer {\n\t\tlet layer: TileLayer;\n\n\t\tswitch (layerDef.type) {\n\t\t\tcase 'xyz':\n\t\t\t\tlayer = tileLayer(layerDef.url,  layerDef.options);\n\t\t\t\tbreak;\n\t\t\tcase 'wms':\n\t\t\tdefault:\n\t\t\t\tlayer = tileLayer.wms(layerDef.url,  layerDef.options);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn layer;\n\t}\n\n\t/**\n\t * Creates a TileLayer for each key in the incoming map. This is a convenience function\n\t * for generating an associative array of layers from an associative array of objects\n\t *\n\t * @param layerDefs A map of key to tile layer definition\n\t * @returns {{[p: string]: TileLayer}} A new map of key to TileLayer\n\t */\n\tstatic createTileLayers(layerDefs: { [ key: string ]: LeafletTileLayerDefinition }): { [ key: string ]: TileLayer } {\n\t\tconst layers: { [ key: string ]: TileLayer } = {};\n\n\t\tfor (const k in layerDefs) {\n\t\t\tif (layerDefs.hasOwnProperty(k)) {\n\t\t\t\tlayers[k] = (LeafletTileLayerDefinition.createTileLayer(layerDefs[k]));\n\t\t\t}\n\t\t}\n\n\t\treturn layers;\n\t}\n\n\t/**\n\t * Create a Tile Layer from the current state of this object\n\t *\n\t * @returns {TileLayer} A new TileLayer\n\t */\n\tcreateTileLayer(): TileLayer {\n\t\treturn LeafletTileLayerDefinition.createTileLayer(this);\n\t}\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}